/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as LoginImport } from './routes/login'
import { Route as ContactImport } from './routes/contact'
import { Route as AboutImport } from './routes/about'
import { Route as UserAuthedRouteImport } from './routes/_userAuthed/route'
import { Route as IndexImport } from './routes/index'
import { Route as UserAuthedWell1RouteImport } from './routes/_userAuthed/well1/route'
import { Route as UserAuthedUsersIndexImport } from './routes/_userAuthed/users/index'
import { Route as UserAuthedWell2WellIDImport } from './routes/_userAuthed/well2/$wellID'
import { Route as UserAuthedWell1WellIDImport } from './routes/_userAuthed/well1/$wellID'

// Create/Update Routes

const LoginRoute = LoginImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const ContactRoute = ContactImport.update({
  id: '/contact',
  path: '/contact',
  getParentRoute: () => rootRoute,
} as any)

const AboutRoute = AboutImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRoute,
} as any)

const UserAuthedRouteRoute = UserAuthedRouteImport.update({
  id: '/_userAuthed',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const UserAuthedWell1RouteRoute = UserAuthedWell1RouteImport.update({
  id: '/well1',
  path: '/well1',
  getParentRoute: () => UserAuthedRouteRoute,
} as any)

const UserAuthedUsersIndexRoute = UserAuthedUsersIndexImport.update({
  id: '/users/',
  path: '/users/',
  getParentRoute: () => UserAuthedRouteRoute,
} as any)

const UserAuthedWell2WellIDRoute = UserAuthedWell2WellIDImport.update({
  id: '/well2/$wellID',
  path: '/well2/$wellID',
  getParentRoute: () => UserAuthedRouteRoute,
} as any)

const UserAuthedWell1WellIDRoute = UserAuthedWell1WellIDImport.update({
  id: '/$wellID',
  path: '/$wellID',
  getParentRoute: () => UserAuthedWell1RouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/_userAuthed': {
      id: '/_userAuthed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof UserAuthedRouteImport
      parentRoute: typeof rootRoute
    }
    '/about': {
      id: '/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof AboutImport
      parentRoute: typeof rootRoute
    }
    '/contact': {
      id: '/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof ContactImport
      parentRoute: typeof rootRoute
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    '/_userAuthed/well1': {
      id: '/_userAuthed/well1'
      path: '/well1'
      fullPath: '/well1'
      preLoaderRoute: typeof UserAuthedWell1RouteImport
      parentRoute: typeof UserAuthedRouteImport
    }
    '/_userAuthed/well1/$wellID': {
      id: '/_userAuthed/well1/$wellID'
      path: '/$wellID'
      fullPath: '/well1/$wellID'
      preLoaderRoute: typeof UserAuthedWell1WellIDImport
      parentRoute: typeof UserAuthedWell1RouteImport
    }
    '/_userAuthed/well2/$wellID': {
      id: '/_userAuthed/well2/$wellID'
      path: '/well2/$wellID'
      fullPath: '/well2/$wellID'
      preLoaderRoute: typeof UserAuthedWell2WellIDImport
      parentRoute: typeof UserAuthedRouteImport
    }
    '/_userAuthed/users/': {
      id: '/_userAuthed/users/'
      path: '/users'
      fullPath: '/users'
      preLoaderRoute: typeof UserAuthedUsersIndexImport
      parentRoute: typeof UserAuthedRouteImport
    }
  }
}

// Create and export the route tree

interface UserAuthedWell1RouteRouteChildren {
  UserAuthedWell1WellIDRoute: typeof UserAuthedWell1WellIDRoute
}

const UserAuthedWell1RouteRouteChildren: UserAuthedWell1RouteRouteChildren = {
  UserAuthedWell1WellIDRoute: UserAuthedWell1WellIDRoute,
}

const UserAuthedWell1RouteRouteWithChildren =
  UserAuthedWell1RouteRoute._addFileChildren(UserAuthedWell1RouteRouteChildren)

interface UserAuthedRouteRouteChildren {
  UserAuthedWell1RouteRoute: typeof UserAuthedWell1RouteRouteWithChildren
  UserAuthedWell2WellIDRoute: typeof UserAuthedWell2WellIDRoute
  UserAuthedUsersIndexRoute: typeof UserAuthedUsersIndexRoute
}

const UserAuthedRouteRouteChildren: UserAuthedRouteRouteChildren = {
  UserAuthedWell1RouteRoute: UserAuthedWell1RouteRouteWithChildren,
  UserAuthedWell2WellIDRoute: UserAuthedWell2WellIDRoute,
  UserAuthedUsersIndexRoute: UserAuthedUsersIndexRoute,
}

const UserAuthedRouteRouteWithChildren = UserAuthedRouteRoute._addFileChildren(
  UserAuthedRouteRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '': typeof UserAuthedRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/well1': typeof UserAuthedWell1RouteRouteWithChildren
  '/well1/$wellID': typeof UserAuthedWell1WellIDRoute
  '/well2/$wellID': typeof UserAuthedWell2WellIDRoute
  '/users': typeof UserAuthedUsersIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '': typeof UserAuthedRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/well1': typeof UserAuthedWell1RouteRouteWithChildren
  '/well1/$wellID': typeof UserAuthedWell1WellIDRoute
  '/well2/$wellID': typeof UserAuthedWell2WellIDRoute
  '/users': typeof UserAuthedUsersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/_userAuthed': typeof UserAuthedRouteRouteWithChildren
  '/about': typeof AboutRoute
  '/contact': typeof ContactRoute
  '/login': typeof LoginRoute
  '/_userAuthed/well1': typeof UserAuthedWell1RouteRouteWithChildren
  '/_userAuthed/well1/$wellID': typeof UserAuthedWell1WellIDRoute
  '/_userAuthed/well2/$wellID': typeof UserAuthedWell2WellIDRoute
  '/_userAuthed/users/': typeof UserAuthedUsersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | ''
    | '/about'
    | '/contact'
    | '/login'
    | '/well1'
    | '/well1/$wellID'
    | '/well2/$wellID'
    | '/users'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | ''
    | '/about'
    | '/contact'
    | '/login'
    | '/well1'
    | '/well1/$wellID'
    | '/well2/$wellID'
    | '/users'
  id:
    | '__root__'
    | '/'
    | '/_userAuthed'
    | '/about'
    | '/contact'
    | '/login'
    | '/_userAuthed/well1'
    | '/_userAuthed/well1/$wellID'
    | '/_userAuthed/well2/$wellID'
    | '/_userAuthed/users/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  UserAuthedRouteRoute: typeof UserAuthedRouteRouteWithChildren
  AboutRoute: typeof AboutRoute
  ContactRoute: typeof ContactRoute
  LoginRoute: typeof LoginRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  UserAuthedRouteRoute: UserAuthedRouteRouteWithChildren,
  AboutRoute: AboutRoute,
  ContactRoute: ContactRoute,
  LoginRoute: LoginRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/_userAuthed",
        "/about",
        "/contact",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/_userAuthed": {
      "filePath": "_userAuthed/route.tsx",
      "children": [
        "/_userAuthed/well1",
        "/_userAuthed/well2/$wellID",
        "/_userAuthed/users/"
      ]
    },
    "/about": {
      "filePath": "about.tsx"
    },
    "/contact": {
      "filePath": "contact.tsx"
    },
    "/login": {
      "filePath": "login.tsx"
    },
    "/_userAuthed/well1": {
      "filePath": "_userAuthed/well1/route.tsx",
      "parent": "/_userAuthed",
      "children": [
        "/_userAuthed/well1/$wellID"
      ]
    },
    "/_userAuthed/well1/$wellID": {
      "filePath": "_userAuthed/well1/$wellID.tsx",
      "parent": "/_userAuthed/well1"
    },
    "/_userAuthed/well2/$wellID": {
      "filePath": "_userAuthed/well2/$wellID.tsx",
      "parent": "/_userAuthed"
    },
    "/_userAuthed/users/": {
      "filePath": "_userAuthed/users/index.tsx",
      "parent": "/_userAuthed"
    }
  }
}
ROUTE_MANIFEST_END */
